package javaapplication;

import com.thoughtworks.xstream.XStream;
import java.text.DecimalFormat;
import java.util.Vector;
import javaapplication.ui.BaseCostPanel;
import javaapplication.ui.CostPanel;
import javaapplication.ui.MaintenanceCostPanel;
import javaapplication.ui.SparePartCostPanel;
import javaapplication.ui.SumpCostPanel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 *
 * @author mujdat
 */
public class NewJFrame extends javax.swing.JFrame {
    
    private DocumentHandler docHandler;
    
    private Study study;
    private CostPanel electricityCP;
    private MaintenanceCostPanel maintenanceCP;
    private SparePartCostPanel sparePartCP;
    private CostPanel pipingCP;
    private SumpCostPanel sumpCP;
    private CostPanel sumpCleanCP;
    private BaseCostPanel baseCP;
    
    public final String SUBMERSIBLE = "Submersible";
    public final String HORIZONTAL = "Horizontal";

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        study = new Study();
        docHandler = new DocumentHandler();
        initPanels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newFileDialog = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        editYearDialog = new javax.swing.JDialog();
        labelYearCount = new javax.swing.JLabel();
        tfYearCount = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        propertyDialog = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        propertyTable = new javax.swing.JTable();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        costDialog = new javax.swing.JDialog();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        editTypeCount = new javax.swing.JDialog();
        labelTypeCount = new javax.swing.JLabel();
        tfTypeCount = new javax.swing.JTextField();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        pumpAmountDailog = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        pumpAmountTable = new javax.swing.JTable();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        calculateDialog = new javax.swing.JDialog();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        calculateTable = new javax.swing.JTable();
        calculateOK = new javax.swing.JButton();
        NPVDialog = new javax.swing.JDialog();
        jLabel6 = new javax.swing.JLabel();
        NPVText = new javax.swing.JTextField();
        jButton24 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        costDefaultTableModel1 = new javaapplication.CostDefaultTableModel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        yearCountText = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        typeCountText = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        typeCountText1 = new javax.swing.JTextField();
        jButton20 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        saveMenu = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        calculateMenu = new javax.swing.JMenu();
        energyCostMenu = new javax.swing.JMenu();
        SubmersibleEnergyCostMenu = new javax.swing.JMenuItem();
        horizontalEnergyCostMenu = new javax.swing.JMenuItem();
        spareCostMenu = new javax.swing.JMenu();
        SubmersibleSpareCostMenu = new javax.swing.JMenuItem();
        horizontalSpareCostMenu = new javax.swing.JMenuItem();
        maintenanceCostMenu = new javax.swing.JMenu();
        SubmersibleMaintenanceCostMenu = new javax.swing.JMenuItem();
        horizontalMaintenanceCostMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        SubmersiblePipingCostMenu = new javax.swing.JMenuItem();
        horizontalPipingCostMenu = new javax.swing.JMenuItem();
        sumpCostMenu = new javax.swing.JMenu();
        sumpConstructMenu = new javax.swing.JMenu();
        SubmersibleSumpCostMenu = new javax.swing.JMenuItem();
        horizontalSumpCostMenu = new javax.swing.JMenuItem();
        sumpCleanMenu = new javax.swing.JMenu();
        submersibleSumpCleanCostMenu = new javax.swing.JMenuItem();
        horizontalSumpCleanCostMenu = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        SubmersibleInitialCostMenu = new javax.swing.JMenuItem();
        horizontalInitialCostMenu = new javax.swing.JMenuItem();
        cashFlowMenu = new javax.swing.JMenu();
        cashFlowMenuItem = new javax.swing.JMenu();
        SubmersibleCashFlowMenuItem = new javax.swing.JMenuItem();
        horizontalCashFlowMenuItem = new javax.swing.JMenuItem();
        NPVMenuItem = new javax.swing.JMenu();
        SubmersibleNPVMenuItem = new javax.swing.JMenuItem();
        horizontalNPVMenuItem = new javax.swing.JMenuItem();

        newFileDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        newFileDialog.setTitle("New Data Entering");
        newFileDialog.setLocationByPlatform(true);
        newFileDialog.setMinimumSize(new java.awt.Dimension(307, 160));
        newFileDialog.setModal(true);
        newFileDialog.setName("newFileDialog"); // NOI18N
        newFileDialog.setResizable(false);

        jLabel1.setText("Enter the name of the new Data File:");

        jTextField1.setText("newData");

        jButton3.setText("OK");

        jButton4.setText("Cancel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newFileDialogLayout = new javax.swing.GroupLayout(newFileDialog.getContentPane());
        newFileDialog.getContentPane().setLayout(newFileDialogLayout);
        newFileDialogLayout.setHorizontalGroup(
            newFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newFileDialogLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(newFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(newFileDialogLayout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(102, 102, 102)
                        .addComponent(jButton4))
                    .addComponent(jTextField1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        newFileDialogLayout.setVerticalGroup(
            newFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newFileDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(newFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        editYearDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        editYearDialog.setTitle("Edit Year Count");
        editYearDialog.setLocationByPlatform(true);
        editYearDialog.setMinimumSize(new java.awt.Dimension(285, 136));
        editYearDialog.setModal(true);
        editYearDialog.setName("editYearDialog"); // NOI18N
        editYearDialog.setResizable(false);

        labelYearCount.setText("Year Count:");

        tfYearCount.setText("0");

        jButton9.setText("Save");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Cancel");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editYearDialogLayout = new javax.swing.GroupLayout(editYearDialog.getContentPane());
        editYearDialog.getContentPane().setLayout(editYearDialogLayout);
        editYearDialogLayout.setHorizontalGroup(
            editYearDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editYearDialogLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(editYearDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelYearCount, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9))
                .addGap(38, 38, 38)
                .addGroup(editYearDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfYearCount, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        editYearDialogLayout.setVerticalGroup(
            editYearDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editYearDialogLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(editYearDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelYearCount, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfYearCount, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(editYearDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        propertyDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        propertyDialog.setLocationByPlatform(true);
        propertyDialog.setMinimumSize(new java.awt.Dimension(588, 300));
        propertyDialog.setModal(true);
        propertyDialog.setResizable(false);

        propertyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "Pressure (Kpa)", "Quantity (m\u00B3/h)", "Working Hour (h/year)", "Efficiency (%)", "Life Time (Year)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        propertyTable.setRowHeight(20);
        propertyTable.setRowMargin(3);
        propertyTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(propertyTable);
        propertyTable.getColumnModel().getColumn(0).setResizable(false);
        propertyTable.getColumnModel().getColumn(0).setPreferredWidth(60);
        propertyTable.getColumnModel().getColumn(1).setResizable(false);
        propertyTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        propertyTable.getColumnModel().getColumn(2).setResizable(false);
        propertyTable.getColumnModel().getColumn(2).setPreferredWidth(100);
        propertyTable.getColumnModel().getColumn(3).setResizable(false);
        propertyTable.getColumnModel().getColumn(3).setPreferredWidth(130);
        propertyTable.getColumnModel().getColumn(4).setResizable(false);
        propertyTable.getColumnModel().getColumn(4).setPreferredWidth(90);
        propertyTable.getColumnModel().getColumn(5).setResizable(false);
        propertyTable.getColumnModel().getColumn(5).setPreferredWidth(100);

        jButton11.setText("Save");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("Cancel");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout propertyDialogLayout = new javax.swing.GroupLayout(propertyDialog.getContentPane());
        propertyDialog.getContentPane().setLayout(propertyDialogLayout);
        propertyDialogLayout.setHorizontalGroup(
            propertyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propertyDialogLayout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addComponent(jButton11)
                .addGap(126, 126, 126)
                .addComponent(jButton12)
                .addContainerGap(182, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        propertyDialogLayout.setVerticalGroup(
            propertyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propertyDialogLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(propertyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        costDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        costDialog.setLocationByPlatform(true);
        costDialog.setMaximumSize(new java.awt.Dimension(540, 550));
        costDialog.setMinimumSize(new java.awt.Dimension(540, 550));
        costDialog.setPreferredSize(new java.awt.Dimension(540, 550));
        costDialog.setResizable(false);

        jTabbedPane1.setMaximumSize(new java.awt.Dimension(540, 439));
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(540, 439));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(540, 439));

        jButton18.setText("Save");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton19.setText("Cancel");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout costDialogLayout = new javax.swing.GroupLayout(costDialog.getContentPane());
        costDialog.getContentPane().setLayout(costDialogLayout);
        costDialogLayout.setHorizontalGroup(
            costDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(costDialogLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        costDialogLayout.setVerticalGroup(
            costDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(costDialogLayout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(costDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton18, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(jButton19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 56, Short.MAX_VALUE))
        );

        costDialog.getAccessibleContext().setAccessibleDescription("");
        costDialog.getAccessibleContext().setAccessibleParent(this);

        editTypeCount.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        editTypeCount.setTitle("Edit Year Count");
        editTypeCount.setLocationByPlatform(true);
        editTypeCount.setMinimumSize(new java.awt.Dimension(285, 136));
        editTypeCount.setModal(true);
        editTypeCount.setName("editYearDialog"); // NOI18N
        editTypeCount.setResizable(false);

        labelTypeCount.setText("Type Count:");

        tfTypeCount.setText("0");
        tfTypeCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfTypeCountActionPerformed(evt);
            }
        });

        jButton14.setText("Save");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setText("Cancel");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editTypeCountLayout = new javax.swing.GroupLayout(editTypeCount.getContentPane());
        editTypeCount.getContentPane().setLayout(editTypeCountLayout);
        editTypeCountLayout.setHorizontalGroup(
            editTypeCountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editTypeCountLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(editTypeCountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelTypeCount, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton14))
                .addGap(38, 38, 38)
                .addGroup(editTypeCountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfTypeCount, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton15))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        editTypeCountLayout.setVerticalGroup(
            editTypeCountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editTypeCountLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(editTypeCountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTypeCount, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfTypeCount, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(editTypeCountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        pumpAmountDailog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        pumpAmountDailog.setLocationByPlatform(true);
        pumpAmountDailog.setMinimumSize(new java.awt.Dimension(498, 300));
        pumpAmountDailog.setModal(true);
        pumpAmountDailog.setResizable(false);

        pumpAmountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        pumpAmountTable.setRowHeight(20);
        pumpAmountTable.setRowMargin(3);
        pumpAmountTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(pumpAmountTable);

        jButton16.setText("Save");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("Cancel");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pumpAmountDailogLayout = new javax.swing.GroupLayout(pumpAmountDailog.getContentPane());
        pumpAmountDailog.getContentPane().setLayout(pumpAmountDailogLayout);
        pumpAmountDailogLayout.setHorizontalGroup(
            pumpAmountDailogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pumpAmountDailogLayout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(jButton16)
                .addGap(96, 96, 96)
                .addComponent(jButton17)
                .addContainerGap(152, Short.MAX_VALUE))
            .addGroup(pumpAmountDailogLayout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        pumpAmountDailogLayout.setVerticalGroup(
            pumpAmountDailogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pumpAmountDailogLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pumpAmountDailogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton16, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        calculateDialog.setMinimumSize(new java.awt.Dimension(462, 320));

        jPanel4.setAutoscrolls(true);
        jPanel4.setMaximumSize(new java.awt.Dimension(437, 278));
        jPanel4.setMinimumSize(new java.awt.Dimension(437, 278));
        jPanel4.setName("Spare Part Costs"); // NOI18N

        calculateTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        calculateTable.setRowSelectionAllowed(false);
        jScrollPane3.setViewportView(calculateTable);

        calculateOK.setText("OK");
        calculateOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(calculateOK)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(calculateOK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout calculateDialogLayout = new javax.swing.GroupLayout(calculateDialog.getContentPane());
        calculateDialog.getContentPane().setLayout(calculateDialogLayout);
        calculateDialogLayout.setHorizontalGroup(
            calculateDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 462, Short.MAX_VALUE)
            .addGroup(calculateDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(calculateDialogLayout.createSequentialGroup()
                    .addGap(0, 12, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 13, Short.MAX_VALUE)))
        );
        calculateDialogLayout.setVerticalGroup(
            calculateDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 292, Short.MAX_VALUE)
            .addGroup(calculateDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(calculateDialogLayout.createSequentialGroup()
                    .addGap(0, 7, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 7, Short.MAX_VALUE)))
        );

        NPVDialog.setMinimumSize(new java.awt.Dimension(255, 170));

        jLabel6.setText("NPV ($) = ");

        NPVText.setEditable(false);
        NPVText.setText("0");
        NPVText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NPVTextActionPerformed(evt);
            }
        });

        jButton24.setText("OK");
        jButton24.setMaximumSize(new java.awt.Dimension(47, 28));
        jButton24.setMinimumSize(new java.awt.Dimension(47, 28));
        jButton24.setPreferredSize(new java.awt.Dimension(47, 28));
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout NPVDialogLayout = new javax.swing.GroupLayout(NPVDialog.getContentPane());
        NPVDialog.getContentPane().setLayout(NPVDialogLayout);
        NPVDialogLayout.setHorizontalGroup(
            NPVDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NPVDialogLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(NPVDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NPVText, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        NPVDialogLayout.setVerticalGroup(
            NPVDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NPVDialogLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(NPVDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NPVText, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jLabel5.setText("jLabel5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Main Window");
        setLocationByPlatform(true);
        setName("mainWindow"); // NOI18N
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel2.setText("Study Period");

        yearCountText.setEditable(false);
        yearCountText.setText("0");
        yearCountText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearCountTextActionPerformed(evt);
            }
        });

        jButton5.setText("Edit");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Submersible", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        jLabel3.setText("Submersible Pump Type Count:");

        typeCountText.setEditable(false);
        typeCountText.setText("0");
        typeCountText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeCountTextActionPerformed(evt);
            }
        });

        jButton6.setText("Edit");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Submersible Pump Properties");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Submersible Pump Amounts");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton13.setText("Submersible Pump Costs");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(typeCountText, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6))
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeCountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(35, 35, 35))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Horizontal", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        jLabel4.setText("Horizontal Pump Type Count:");

        typeCountText1.setEditable(false);
        typeCountText1.setText("0");
        typeCountText1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeCountText1ActionPerformed(evt);
            }
        });

        jButton20.setText("Edit");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        jButton21.setText("Horizontal Pump Amounts");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        jButton22.setText("Horizontal Pump Properties");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jButton23.setText("Horizontal Pump Costs");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton23, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton22, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(typeCountText1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton20))
                    .addComponent(jButton21, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeCountText1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton20))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yearCountText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearCountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addGap(11, 11, 11)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jPanel2.getAccessibleContext().setAccessibleName("Pump1");
        jPanel2.getAccessibleContext().setAccessibleDescription("");

        jMenu1.setText("File");

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenu.setText("Save");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        jMenu1.add(saveMenu);

        jMenuItem2.setText("Open");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        calculateMenu.setText("Calculate");

        energyCostMenu.setText("Energy Cost");

        SubmersibleEnergyCostMenu.setText("Submersible");
        SubmersibleEnergyCostMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmersibleEnergyCostMenuActionPerformed(evt);
            }
        });
        energyCostMenu.add(SubmersibleEnergyCostMenu);

        horizontalEnergyCostMenu.setText("Horizontal");
        horizontalEnergyCostMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalEnergyCostMenuActionPerformed(evt);
            }
        });
        energyCostMenu.add(horizontalEnergyCostMenu);

        calculateMenu.add(energyCostMenu);

        spareCostMenu.setText("Spare Part Cost");

        SubmersibleSpareCostMenu.setText("Submersible");
        SubmersibleSpareCostMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmersibleSpareCostMenuActionPerformed(evt);
            }
        });
        spareCostMenu.add(SubmersibleSpareCostMenu);

        horizontalSpareCostMenu.setText("Horizontal");
        horizontalSpareCostMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalSpareCostMenuActionPerformed(evt);
            }
        });
        spareCostMenu.add(horizontalSpareCostMenu);

        calculateMenu.add(spareCostMenu);

        maintenanceCostMenu.setText("Maintenance - Repair Cost");

        SubmersibleMaintenanceCostMenu.setText("Submersible");
        SubmersibleMaintenanceCostMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmersibleMaintenanceCostMenuActionPerformed(evt);
            }
        });
        maintenanceCostMenu.add(SubmersibleMaintenanceCostMenu);

        horizontalMaintenanceCostMenu.setText("Horizontal");
        horizontalMaintenanceCostMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalMaintenanceCostMenuActionPerformed(evt);
            }
        });
        maintenanceCostMenu.add(horizontalMaintenanceCostMenu);

        calculateMenu.add(maintenanceCostMenu);

        jMenu2.setText("Piping Cost");

        SubmersiblePipingCostMenu.setText("Submersible");
        SubmersiblePipingCostMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmersiblePipingCostMenuActionPerformed(evt);
            }
        });
        jMenu2.add(SubmersiblePipingCostMenu);

        horizontalPipingCostMenu.setText("Horizontal");
        horizontalPipingCostMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalPipingCostMenuActionPerformed(evt);
            }
        });
        jMenu2.add(horizontalPipingCostMenu);

        calculateMenu.add(jMenu2);

        sumpCostMenu.setText("Sump Cost");

        sumpConstructMenu.setText("Sump Construction Cost");

        SubmersibleSumpCostMenu.setText("Submersible");
        SubmersibleSumpCostMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmersibleSumpCostMenuActionPerformed(evt);
            }
        });
        sumpConstructMenu.add(SubmersibleSumpCostMenu);

        horizontalSumpCostMenu.setText("Horizontal");
        horizontalSumpCostMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalSumpCostMenuActionPerformed(evt);
            }
        });
        sumpConstructMenu.add(horizontalSumpCostMenu);

        sumpCostMenu.add(sumpConstructMenu);

        sumpCleanMenu.setText("Sump Clean Cost");

        submersibleSumpCleanCostMenu.setText("Submersible");
        submersibleSumpCleanCostMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submersibleSumpCleanCostMenuActionPerformed(evt);
            }
        });
        sumpCleanMenu.add(submersibleSumpCleanCostMenu);

        horizontalSumpCleanCostMenu.setText("Horizontal");
        horizontalSumpCleanCostMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalSumpCleanCostMenuActionPerformed(evt);
            }
        });
        sumpCleanMenu.add(horizontalSumpCleanCostMenu);

        sumpCostMenu.add(sumpCleanMenu);

        calculateMenu.add(sumpCostMenu);

        jMenu4.setText("Initial Investment Cost");

        SubmersibleInitialCostMenu.setText("Submersible");
        SubmersibleInitialCostMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmersibleInitialCostMenuActionPerformed(evt);
            }
        });
        jMenu4.add(SubmersibleInitialCostMenu);

        horizontalInitialCostMenu.setText("Horizontal");
        horizontalInitialCostMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalInitialCostMenuActionPerformed(evt);
            }
        });
        jMenu4.add(horizontalInitialCostMenu);

        calculateMenu.add(jMenu4);

        cashFlowMenu.setText("Cash Flow");

        cashFlowMenuItem.setText("Cash Flow");

        SubmersibleCashFlowMenuItem.setText("Submersible");
        SubmersibleCashFlowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmersibleCashFlowMenuItemActionPerformed(evt);
            }
        });
        cashFlowMenuItem.add(SubmersibleCashFlowMenuItem);

        horizontalCashFlowMenuItem.setText("Horizontal");
        horizontalCashFlowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalCashFlowMenuItemActionPerformed(evt);
            }
        });
        cashFlowMenuItem.add(horizontalCashFlowMenuItem);

        cashFlowMenu.add(cashFlowMenuItem);

        NPVMenuItem.setText("NPV");

        SubmersibleNPVMenuItem.setText("Submersible");
        SubmersibleNPVMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmersibleNPVMenuItemActionPerformed(evt);
            }
        });
        NPVMenuItem.add(SubmersibleNPVMenuItem);

        horizontalNPVMenuItem.setText("Horizontal");
        horizontalNPVMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalNPVMenuItemActionPerformed(evt);
            }
        });
        NPVMenuItem.add(horizontalNPVMenuItem);

        cashFlowMenu.add(NPVMenuItem);

        calculateMenu.add(cashFlowMenu);

        jMenuBar1.add(calculateMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        tfYearCount.setText(Integer.toString(study.getYearCount()));
    }//GEN-LAST:event_formComponentShown

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        study.setYearCount(Integer.valueOf(tfYearCount.getText()));
        yearCountText.setText(tfYearCount.getText());
        editYearDialog.dispose();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        tfYearCount.setText(Integer.toString(study.getYearCount()));
        editYearDialog.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed

        switch(propertyDialog.getName()){
            case SUBMERSIBLE:
                study.setSubmersiblePumpProperties(
                this.getPropertiesVector((DefaultTableModel)propertyTable.getModel())
                );
                break;
            case HORIZONTAL:
                study.setHorizontalPumpProperties(
                this.getPropertiesVector((DefaultTableModel)propertyTable.getModel())
                );
                break;
        }
        propertyDialog.dispose();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        tfTypeCount.setText(Integer.toString(study.getSubmersibleTypeCount()));
        editTypeCount.setName(SUBMERSIBLE);
        editTypeCount.setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        switch (editTypeCount.getName()){
            case SUBMERSIBLE:
                study.setSubmersibleTypeCount( Integer.valueOf(tfTypeCount.getText()) );
                typeCountText.setText(tfTypeCount.getText());
                break;
            case HORIZONTAL:
                study.setHorizontalTypeCount(Integer.valueOf(tfTypeCount.getText()) );
                typeCountText1.setText(tfTypeCount.getText());
                break;
        }
        
        editTypeCount.dispose();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        editYearDialog.dispose();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void yearCountTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearCountTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yearCountTextActionPerformed

    private void tfTypeCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfTypeCountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfTypeCountActionPerformed

    private void typeCountTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeCountTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeCountTextActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        editTypeCount.dispose();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if(study.getSubmersibleTypeCount() == 0) {
            JOptionPane.showMessageDialog(null, "First You should Enter a Type Count");
            return;
        }
        fillPropertiesTable(((DefaultTableModel)propertyTable.getModel()),
                study.getSubmersiblePumpProperties(), study.getSubmersibleTypeCount());
        propertyDialog.setName(SUBMERSIBLE);
        propertyDialog.setTitle("Submersible Pump Properties");
        propertyDialog.setLocationRelativeTo(this);
        propertyDialog.setVisible(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        propertyDialog.dispose();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        if(study.getSubmersibleTypeCount() == 0) {
            JOptionPane.showMessageDialog(null, "First You should Enter a Type Count");
            return;
        }
        fillAmountTable(study.getSubmersiblePumpAmounts(), study.getSubmersibleTypeCount());
        pumpAmountDailog.setTitle("Submersible Pump Amounts");
        pumpAmountDailog.setName(SUBMERSIBLE);
        pumpAmountDailog.setLocationRelativeTo(this);
        pumpAmountDailog.setVisible(true);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        switch (pumpAmountDailog.getName()) {
            case SUBMERSIBLE:
                study.setSubmersiblePumpAmounts(getPumpAmounts());
                break;
            case HORIZONTAL:
                study.setHorizontalPumpAmounts(getPumpAmounts());
                break;
        }
        
        pumpAmountDailog.dispose();
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        pumpAmountDailog.dispose();
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        if(study.getSubmersibleTypeCount() == 0) {
            JOptionPane.showMessageDialog(null, "First You should Enter a Type Count");
            return;
        }
        electricityCP.initCostPanel(study.getSubmersibleElectricityCost(), study.getYearCount(), "Electricity Cost");
        sparePartCP.initCostPanel(study.getSubmersibleSparePartCost(), study.getSubmersibleTypeCount(), study.getYearCount());
        maintenanceCP.initCostPanel(study.getSubmersibleMaintenanceCost(), study.getYearCount());
        pipingCP.initCostPanel(study.getSubmersiblePipingCost(), study.getYearCount(), "Piping Cost");
        sumpCP.initCostPanel(study.getSubmersibleSumpCost(), study.getYearCount());
        sumpCleanCP.initCostPanel(study.getSubmersibleSumpCleanCost(), study.getYearCount(), "Cleaning Cost");
        baseCP.initCostPanel(study.getSubmersibleBaseCosts(), study.getSubmersibleTypeCount(), study.getYearCount());
        costDialog.setModal(true);
        costDialog.setTitle("Submersible Pump Costs");
        costDialog.setName(SUBMERSIBLE);
        costDialog.setLocationRelativeTo(this);
        costDialog.setVisible(true);
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        costDialog.dispose();
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        switch (costDialog.getName()) {
            case SUBMERSIBLE:
                study.setSubmersibleElectricityCost(electricityCP.getCost());
                study.setSubmersibleSparePartCost(sparePartCP.getCosts());
                study.setSubmersibleMaintenanceCost(maintenanceCP.getCost());
                study.setSubmersiblePipingCost(pipingCP.getCost());
                study.setSubmersibleSumpCost(sumpCP.getCost());
                study.setSubmersibleSumpCleanCost(sumpCleanCP.getCost());
                study.setSubmersibleBaseCosts(baseCP.getCost());
                break;
            case HORIZONTAL:
                study.setHorizontalElectricityCost(electricityCP.getCost());
                study.setHorizontalSparePartCost(sparePartCP.getCosts());
                study.setHorizontalMaintenanceCost(maintenanceCP.getCost());
                study.setHorizontalPipingCost(pipingCP.getCost());
                study.setHorizontalSumpCost(sumpCP.getCost());
                study.setHorizontalSumpCleanCost(sumpCleanCP.getCost());
                study.setHorizontalBaseCosts(baseCP.getCost());
                break;
        }
        
        costDialog.dispose();
    }//GEN-LAST:event_jButton18ActionPerformed

    private void SubmersibleSumpCostMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmersibleSumpCostMenuActionPerformed
        initSubmersibleSumpCalculateTable();
        calculateDialog.setTitle("Submersible Pump");
        calculateDialog.setLocationRelativeTo(this);
        calculateDialog.setVisible(true);
    }//GEN-LAST:event_SubmersibleSumpCostMenuActionPerformed

    private void SubmersibleInitialCostMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmersibleInitialCostMenuActionPerformed
        initSubmersibleInvestmentCalculateTable();
        calculateDialog.setTitle("Submersible Pump");
        calculateDialog.setLocationRelativeTo(this);
        calculateDialog.setVisible(true);
    }//GEN-LAST:event_SubmersibleInitialCostMenuActionPerformed

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
        docHandler.save(study);
    }//GEN-LAST:event_saveMenuActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        Study oStudy = docHandler.load();
        if(oStudy != null) {
            study = oStudy;
        }
        yearCountText.setText(Integer.toString(study.getYearCount()));
        typeCountText.setText(Integer.toString(study.getSubmersibleTypeCount()));
        typeCountText1.setText(Integer.toString(study.getHorizontalTypeCount()));
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void SubmersibleEnergyCostMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmersibleEnergyCostMenuActionPerformed
        initSubmersibleEnergyCalculateTable();
        calculateDialog.setTitle("Submersible Pump");
        calculateDialog.setLocationRelativeTo(this);
        calculateDialog.setVisible(true);
    }//GEN-LAST:event_SubmersibleEnergyCostMenuActionPerformed

    private void typeCountText1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeCountText1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeCountText1ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        tfTypeCount.setText(Integer.toString(study.getHorizontalTypeCount()));
        editTypeCount.setName(HORIZONTAL);
        editTypeCount.setVisible(true);
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        if(study.getHorizontalTypeCount() == 0) {
            JOptionPane.showMessageDialog(null, "First You should Enter a Type Count");
            return;
        }
        fillAmountTable(study.getHorizontalPumpAmounts(), study.getHorizontalTypeCount());
        pumpAmountDailog.setTitle("Horizontal Pump Amounts");
        pumpAmountDailog.setName(HORIZONTAL);
        pumpAmountDailog.setLocationRelativeTo(this);
        pumpAmountDailog.setVisible(true);        
    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        if(study.getHorizontalTypeCount() == 0) {
            JOptionPane.showMessageDialog(null, "First You should Enter a Type Count");
            return;
        }
        fillPropertiesTable(((DefaultTableModel)propertyTable.getModel()),
                study.getHorizontalPumpProperties(), study.getHorizontalTypeCount());
        propertyDialog.setName(HORIZONTAL);
        propertyDialog.setTitle("Horizontal Pump Properties");
        propertyDialog.setLocationRelativeTo(this);
        propertyDialog.setVisible(true);
    }//GEN-LAST:event_jButton22ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        if(study.getHorizontalTypeCount() == 0) {
            JOptionPane.showMessageDialog(null, "First You should Enter a Type Count");
            return;
        }
        electricityCP.initCostPanel(study.getHorizontalElectricityCost(), study.getYearCount(), "Electricity Cost");
        sparePartCP.initCostPanel(study.getHorizontalSparePartCost(), study.getHorizontalTypeCount(), study.getYearCount());
        maintenanceCP.initCostPanel(study.getHorizontalMaintenanceCost(), study.getYearCount());
        pipingCP.initCostPanel(study.getHorizontalPipingCost(), study.getYearCount(), "Piping Cost");
        sumpCP.initCostPanel(study.getHorizontalSumpCost(), study.getYearCount());
        sumpCleanCP.initCostPanel(study.getHorizontalSumpCleanCost(), study.getYearCount(), "Cleaning Cost");
        baseCP.initCostPanel(study.getHorizontalBaseCosts(), study.getHorizontalTypeCount(), study.getYearCount());
        costDialog.setModal(true);
        costDialog.setTitle("Horizontal Pump Costs");
        costDialog.setName(HORIZONTAL);
        costDialog.setLocationRelativeTo(this);
        costDialog.setVisible(true);
    }//GEN-LAST:event_jButton23ActionPerformed

    private void SubmersibleSpareCostMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmersibleSpareCostMenuActionPerformed
        initSubmersibleSparePartCalculateTable();
        calculateDialog.setTitle("Submersible Pump");
        calculateDialog.setLocationRelativeTo(this);
        calculateDialog.setVisible(true);
    }//GEN-LAST:event_SubmersibleSpareCostMenuActionPerformed

    private void SubmersibleMaintenanceCostMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmersibleMaintenanceCostMenuActionPerformed
        initSubmersibleMaintenanceCalculateTable();
        calculateDialog.setTitle("Submersible Pump");
        calculateDialog.setLocationRelativeTo(this);
        calculateDialog.setVisible(true);
    }//GEN-LAST:event_SubmersibleMaintenanceCostMenuActionPerformed

    private void SubmersiblePipingCostMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmersiblePipingCostMenuActionPerformed
        initSubmersiblePipingCalculateTable();
        calculateDialog.setTitle("Submersible Pump");
        calculateDialog.setLocationRelativeTo(this);
        calculateDialog.setVisible(true);
    }//GEN-LAST:event_SubmersiblePipingCostMenuActionPerformed

    private void SubmersibleCashFlowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmersibleCashFlowMenuItemActionPerformed
        initSubmersibleAllCalculateTable();
        calculateDialog.setTitle("Submersible Pump");
        calculateDialog.setLocationRelativeTo(this);
        calculateDialog.setVisible(true);
    }//GEN-LAST:event_SubmersibleCashFlowMenuItemActionPerformed

    private void horizontalEnergyCostMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalEnergyCostMenuActionPerformed
        initHorizontalEnergyCalculateTable();
        calculateDialog.setTitle("Horizontal Pump");
        calculateDialog.setLocationRelativeTo(this);
        calculateDialog.setVisible(true);
    }//GEN-LAST:event_horizontalEnergyCostMenuActionPerformed

    private void horizontalSpareCostMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalSpareCostMenuActionPerformed
        initHorizontalSparePartCalculateTable();
        calculateDialog.setTitle("Horizontal Pump");
        calculateDialog.setLocationRelativeTo(this);
        calculateDialog.setVisible(true);
    }//GEN-LAST:event_horizontalSpareCostMenuActionPerformed

    private void horizontalMaintenanceCostMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalMaintenanceCostMenuActionPerformed
        initHorizontalMaintenanceCalculateTable();
        calculateDialog.setTitle("Horizontal Pump");
        calculateDialog.setLocationRelativeTo(this);
        calculateDialog.setVisible(true);
    }//GEN-LAST:event_horizontalMaintenanceCostMenuActionPerformed

    private void horizontalPipingCostMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalPipingCostMenuActionPerformed
        initHorizontalPipingCalculateTable();
        calculateDialog.setTitle("Horizontal Pump");
        calculateDialog.setLocationRelativeTo(this);
        calculateDialog.setVisible(true);
    }//GEN-LAST:event_horizontalPipingCostMenuActionPerformed

    private void horizontalSumpCostMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalSumpCostMenuActionPerformed
        initHorizontalSumpCalculateTable();
        calculateDialog.setTitle("Horizontal Pump");
        calculateDialog.setLocationRelativeTo(this);
        calculateDialog.setVisible(true);
    }//GEN-LAST:event_horizontalSumpCostMenuActionPerformed

    private void submersibleSumpCleanCostMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submersibleSumpCleanCostMenuActionPerformed
        initSubmersibleSumpCleanCalculateTable();
        calculateDialog.setTitle("Submersible Pump");
        calculateDialog.setLocationRelativeTo(this);
        calculateDialog.setVisible(true);
    }//GEN-LAST:event_submersibleSumpCleanCostMenuActionPerformed

    private void horizontalSumpCleanCostMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalSumpCleanCostMenuActionPerformed
        initHorizontalSumpCleanCalculateTable();
        calculateDialog.setTitle("Horizontal Pump");
        calculateDialog.setLocationRelativeTo(this);
        calculateDialog.setVisible(true);
    }//GEN-LAST:event_horizontalSumpCleanCostMenuActionPerformed

    private void horizontalInitialCostMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalInitialCostMenuActionPerformed
        initHorizontalInvestmentCalculateTable();
        calculateDialog.setTitle("Horizontal Pump");
        calculateDialog.setLocationRelativeTo(this);
        calculateDialog.setVisible(true);
    }//GEN-LAST:event_horizontalInitialCostMenuActionPerformed

    private void horizontalCashFlowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalCashFlowMenuItemActionPerformed
        initHorizontalAllCalculateTable();
        calculateDialog.setTitle("Horizontal Pump");
        calculateDialog.setLocationRelativeTo(this);
        calculateDialog.setVisible(true);
    }//GEN-LAST:event_horizontalCashFlowMenuItemActionPerformed

    private void SubmersibleNPVMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmersibleNPVMenuItemActionPerformed
        Double value = calculateSubmersibleNPV();
        NPVText.setText(new DecimalFormat("#.#").format(value));
        NPVDialog.setTitle("Submersible NPV");
        NPVDialog.setLocationRelativeTo(this);
        NPVDialog.setVisible(true);
    }//GEN-LAST:event_SubmersibleNPVMenuItemActionPerformed

    private void horizontalNPVMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalNPVMenuItemActionPerformed
        Double value = calculateHorizontalNPV();
        NPVText.setText(new DecimalFormat("#.#").format(value));
        NPVDialog.setTitle("Horizontal NPV");
        NPVDialog.setLocationRelativeTo(this);
        NPVDialog.setVisible(true);
    }//GEN-LAST:event_horizontalNPVMenuItemActionPerformed

    private void calculateOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateOKActionPerformed
        calculateDialog.setVisible(false);
    }//GEN-LAST:event_calculateOKActionPerformed

    private void NPVTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NPVTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NPVTextActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        NPVDialog.setVisible(false);
    }//GEN-LAST:event_jButton24ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    
    private String type="";
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog NPVDialog;
    private javax.swing.JMenu NPVMenuItem;
    private javax.swing.JTextField NPVText;
    private javax.swing.JMenuItem SubmersibleCashFlowMenuItem;
    private javax.swing.JMenuItem SubmersibleEnergyCostMenu;
    private javax.swing.JMenuItem SubmersibleInitialCostMenu;
    private javax.swing.JMenuItem SubmersibleMaintenanceCostMenu;
    private javax.swing.JMenuItem SubmersibleNPVMenuItem;
    private javax.swing.JMenuItem SubmersiblePipingCostMenu;
    private javax.swing.JMenuItem SubmersibleSpareCostMenu;
    private javax.swing.JMenuItem SubmersibleSumpCostMenu;
    private javax.swing.JDialog calculateDialog;
    private javax.swing.JMenu calculateMenu;
    private javax.swing.JButton calculateOK;
    private javax.swing.JTable calculateTable;
    private javax.swing.JMenu cashFlowMenu;
    private javax.swing.JMenu cashFlowMenuItem;
    private javaapplication.CostDefaultTableModel costDefaultTableModel1;
    private javax.swing.JDialog costDialog;
    private javax.swing.JDialog editTypeCount;
    private javax.swing.JDialog editYearDialog;
    private javax.swing.JMenu energyCostMenu;
    private javax.swing.JMenuItem horizontalCashFlowMenuItem;
    private javax.swing.JMenuItem horizontalEnergyCostMenu;
    private javax.swing.JMenuItem horizontalInitialCostMenu;
    private javax.swing.JMenuItem horizontalMaintenanceCostMenu;
    private javax.swing.JMenuItem horizontalNPVMenuItem;
    private javax.swing.JMenuItem horizontalPipingCostMenu;
    private javax.swing.JMenuItem horizontalSpareCostMenu;
    private javax.swing.JMenuItem horizontalSumpCleanCostMenu;
    private javax.swing.JMenuItem horizontalSumpCostMenu;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel labelTypeCount;
    private javax.swing.JLabel labelYearCount;
    private javax.swing.JMenu maintenanceCostMenu;
    private javax.swing.JDialog newFileDialog;
    private javax.swing.JDialog propertyDialog;
    private javax.swing.JTable propertyTable;
    private javax.swing.JDialog pumpAmountDailog;
    private javax.swing.JTable pumpAmountTable;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JMenu spareCostMenu;
    private javax.swing.JMenuItem submersibleSumpCleanCostMenu;
    private javax.swing.JMenu sumpCleanMenu;
    private javax.swing.JMenu sumpConstructMenu;
    private javax.swing.JMenu sumpCostMenu;
    private javax.swing.JTextField tfTypeCount;
    private javax.swing.JTextField tfYearCount;
    private javax.swing.JTextField typeCountText;
    private javax.swing.JTextField typeCountText1;
    private javax.swing.JTextField yearCountText;
    // End of variables declaration//GEN-END:variables

    
    private void fillPropertiesTable(DefaultTableModel model, Vector<PumpProperties> properties, int types) {
        model.setRowCount(0);
        int rowCount = types;
        for(int i = 0; i<rowCount; i++) {
            Object rowData[];
            if(i < properties.size()) {
                rowData = new Object[]{ Integer.toString(i+1),
                    properties.get(i).getPressure(),
                    properties.get(i).getQuantity(),
                    properties.get(i).getWorkingHour(),
                    properties.get(i).getEfficiency(),
                    properties.get(i).getLifeTime()
                };
            }
            else
            {
                rowData = new Object[]{Integer.toString(i+1), 0.0, 0.0, 0.0, 0.0, 0.0};
            }
            model.addRow(rowData);
        }
    }
    
    private Vector<PumpProperties> getPropertiesVector(DefaultTableModel model) {
        int rowCount = model.getRowCount();
        Vector<PumpProperties> pumpProperties = new Vector<PumpProperties>();
        for(int i = 0; i<rowCount; i++) {
            PumpProperties prop;
            prop = new PumpProperties();
            prop.setPressure((Double)model.getValueAt(i, 1));
            prop.setQuantity((Double)model.getValueAt(i, 2));
            prop.setWorkingHour((Double)model.getValueAt(i, 3));
            prop.setEfficiency((Double)model.getValueAt(i, 4));
            prop.setLifeTime((Double)model.getValueAt(i, 5));
            pumpProperties.add(prop);
        }
        return pumpProperties;
    }
    
    private void fillAmountTable(Vector< Vector<Integer> > pumpAmounts, int types) {
        int years = study.getYearCount();
        MyDefaultTableModel model = new MyDefaultTableModel();
        pumpAmountTable.setModel(model);
        
        Integer[] firstColumn = new Integer[years];
        for(int j = 0; j < years; j++) {
            firstColumn[j] = j + 1;
        }
        model.addColumn("Year", firstColumn);
        
        for(int i = 0; i < types; i++) {
            Integer[] column = new Integer[years];
            int typeNo = i+1;
            for(int k = 0; k < years; k++) {
                if(pumpAmounts == null || pumpAmounts.size() <= k) {
                    column[k] = 0;
                    continue;
                }
                Vector<Integer> row = pumpAmounts.get(k);
                if(row == null || row.size() <= i) {
                    column[k] = 0;   
                }
                else {
                    column[k] = row.get(i);
                }
            }
            model.addColumn("Type " + typeNo, column);
        }
        
    }
    
    private Vector< Vector<Integer> > getPumpAmounts() {
 
        MyDefaultTableModel model = (MyDefaultTableModel) pumpAmountTable.getModel();
        int rowCount = model.getRowCount();
        int columnCount = model.getColumnCount();
        Vector< Vector<Integer> > pumpAmounts = new Vector<Vector<Integer>>();
        for(int i=0; i< rowCount; i++ ) {
            Vector<Integer> yearValues = new Vector<Integer>();
            for(int j=1; j<columnCount; j++) {
                yearValues.add((Integer)model.getValueAt(i, j));
            }
            pumpAmounts.add(yearValues);
        }
        
        return pumpAmounts;
        
    }

    private void initPanels() {
        electricityCP = new CostPanel();
        electricityCP.setName("Electricity Cost");
        maintenanceCP = new MaintenanceCostPanel();
        maintenanceCP.setName("Maintenance Cost");
        sparePartCP = new SparePartCostPanel();
        sparePartCP.setName("Spare Part Cost");
        pipingCP = new CostPanel();
        pipingCP.setName("Piping Cost");
        sumpCP = new SumpCostPanel();
        sumpCP.setName("Sump Cost");
        sumpCleanCP = new CostPanel();
        sumpCleanCP.setName("Sump Clean Cost");
        baseCP = new BaseCostPanel();
        baseCP.setName("Base Costs");
        jTabbedPane1.add(electricityCP);
        jTabbedPane1.add(sparePartCP);
        jTabbedPane1.add(maintenanceCP);
        jTabbedPane1.add(pipingCP);
        jTabbedPane1.add(sumpCP);
        jTabbedPane1.add(sumpCleanCP);
        jTabbedPane1.add(baseCP);
    }
    
   
    
    
    /*
     * Calculation
     * */
    
    Double[] calculateSubmersibleEnergyCost(){
        int years = study.getYearCount();
        int types = study.getSubmersibleTypeCount();

        Double[] electricityCosts = new Double[years];

        Vector<PumpProperties> pumpProperties = study.getSubmersiblePumpProperties();
        Vector<Vector<Integer>> pumpAmounts = study.getSubmersiblePumpAmounts();
        
        Cost eCost = study.getSubmersibleElectricityCost();
        if(eCost.getType().equals(Cost.COST_RISE_PERCENTAGE)) {
            PercentageCost pCost = (PercentageCost)eCost;
            double bValue = pCost.getBaseValue();
            int percentage = pCost.getPercentage();
            for(int k = 0; k < years; k++) {
                electricityCosts[k] = bValue;
                bValue = bValue + bValue*percentage/100;
            }
        }
        else if(eCost.getType().equals(Cost.COST_RISE_USER_DEFINED)) {
            UserDefinedCost pCost = (UserDefinedCost)eCost;
            Vector<Double> costs= pCost.getCostValues();
            for(int k = 0; k < years; k++) {
                electricityCosts[k] = costs.get(k);
            }
        }
        
            Double[] column = new Double[years];
            for(int k = 0; k < years; k++) {
                if(pumpAmounts == null || pumpAmounts.size() <= k) {
                    column[k] = 0.0;
                    continue;
                }
                column[k] = 0.0;
                Vector<Integer> row = pumpAmounts.get(k);
                for(int i = 0; i < types; i++) {
                if(row == null || row.size() <= i || pumpProperties == null || pumpProperties.size() <= i) {
                    continue;  
                }
                else {
                    PumpProperties properties = pumpProperties.get(i);
                    if(properties.getEfficiency() <= 0.0){
                        column[k] = column[k] + 0.0;
                    }
                    else {
                    column[k] = column[k] +
                            row.get(i)*
                            electricityCosts[k]*
                            properties.getPressure()*
                            properties.getQuantity()*
                            properties.getWorkingHour()/
                            (properties.getEfficiency()/100.0);
                    }
                }
                }
            }
        return column;
    }
    
    public void initSubmersibleEnergyCalculateTable(){
        int years = study.getYearCount();

        DefaultTableModel model = new DefaultTableModel();
        Integer[] firstColumn = new Integer[years];
        for(int j = 0; j < years; j++) {
            firstColumn[j] = j;
        }
        model.addColumn("Year", firstColumn);
        
        String[] column = getTwoDigitPresicion(calculateSubmersibleEnergyCost());

        model.addColumn("Energy Cost ($)", column);
        
        calculateTable.setModel(model);
    }
    
    Double[] calculateHorizontalEnergyCost(){
        int years = study.getYearCount();
        int types = study.getHorizontalTypeCount();

        Double[] electricityCosts = new Double[years];
        Vector<PumpProperties> pumpProperties = study.getHorizontalPumpProperties();
        Vector<Vector<Integer>> pumpAmounts = study.getHorizontalPumpAmounts();
        
        Cost eCost = study.getHorizontalElectricityCost();
        if(eCost.getType().equals(Cost.COST_RISE_PERCENTAGE)) {
            PercentageCost pCost = (PercentageCost)eCost;
            double bValue = pCost.getBaseValue();
            int percentage = pCost.getPercentage();
            for(int k = 0; k < years; k++) {
                electricityCosts[k] = bValue;
                bValue = bValue + bValue*percentage/100;
            }
        }
        else if(eCost.getType().equals(Cost.COST_RISE_USER_DEFINED)) {
            UserDefinedCost pCost = (UserDefinedCost)eCost;
            Vector<Double> costs= pCost.getCostValues();
            for(int k = 0; k < years; k++) {
                electricityCosts[k] = costs.get(k);
            }
        }
        
            Double[] column = new Double[years];
            for(int k = 0; k < years; k++) {
                if(pumpAmounts == null || pumpAmounts.size() <= k) {
                    column[k] = 0.0;
                    continue;
                }
                column[k] = 0.0;
                Vector<Integer> row = pumpAmounts.get(k);
                for(int i = 0; i < types; i++) {
                if(row == null || row.size() <= i || pumpProperties == null || pumpProperties.size() <= i) {
                    continue;  
                }
                else {
                    PumpProperties properties = pumpProperties.get(i);
                    if(properties.getEfficiency() <= 0.0){
                        column[k] = column[k] + 0.0;
                    }
                    else {
                    column[k] = column[k] +
                            row.get(i)*
                            electricityCosts[k]*
                            properties.getPressure()*
                            properties.getQuantity()*
                            properties.getWorkingHour()/
                            (properties.getEfficiency()/100.0);
                    }
                }
                }
            }
            return column;
    }
    
    public void initHorizontalEnergyCalculateTable(){
        int years = study.getYearCount();

        DefaultTableModel model = new DefaultTableModel();
        Integer[] firstColumn = new Integer[years];
        for(int j = 0; j < years; j++) {
            firstColumn[j] = j;
        }
        model.addColumn("Year", firstColumn);
        String[] column = getTwoDigitPresicion(calculateHorizontalEnergyCost());
        model.addColumn("Energy Cost ($)", column);
        
        calculateTable.setModel(model);
    }
    
    
    Double[] calculateSubmersibleSparePartCost(){
        int years = study.getYearCount();
        int types = study.getSubmersibleTypeCount();

        PumpSparePartCosts pumpSparePartCosts = study.getSubmersibleSparePartCost();
        Vector<Vector<Integer>> pumpAmounts = study.getSubmersiblePumpAmounts();
        Vector< Vector<SparePartCost>> diffuser = pumpSparePartCosts.getDiffuserCoatCost().getCosts();
        Vector< Vector<SparePartCost>> flangs = pumpSparePartCosts.getFlangsCost().getCosts();
        Vector< Vector<SparePartCost>> impeller = pumpSparePartCosts.getImpellerCost().getCosts();
        Vector< Vector<SparePartCost>> mSeal = pumpSparePartCosts.getMechanicalSealCost().getCosts();
        Vector< Vector<SparePartCost>> oilH = pumpSparePartCosts.getOilHousingCost().getCosts();
        Vector< Vector<SparePartCost>> rValve = pumpSparePartCosts.getReliefValveCost().getCosts();
        Vector< Vector<SparePartCost>> seal = pumpSparePartCosts.getSealCost().getCosts();
        Vector< Vector<SparePartCost>> shaft = pumpSparePartCosts.getShaftCost().getCosts();
        Vector< Vector<SparePartCost>> shaftSeal = pumpSparePartCosts.getShaftSealCost().getCosts();
        Vector< Vector<SparePartCost>> sCover = pumpSparePartCosts.getSuctionCoverCost().getCosts();
        Vector< Vector<SparePartCost>> washers = pumpSparePartCosts.getWashersCost().getCosts();
        Vector< Vector<SparePartCost>> oRing = pumpSparePartCosts.getoRingKitCost().getCosts();
        Vector< Vector<SparePartCost>> bearing = pumpSparePartCosts.getBearingsCost().getCosts();
        Vector< Vector<SparePartCost>> other = pumpSparePartCosts.getOtherCost().getCosts();
        
        
            Double[] column = new Double[years];
            for(int k = 0; k < years; k++) {
                if(pumpAmounts == null || pumpAmounts.size() <= k) {
                    column[k] = 0.0;
                    continue;
                }
                column[k] = 0.0;
                Vector<Integer> row = pumpAmounts.get(k);
                for(int i = 0; i < types; i++) {
                if(row == null || row.size() <= i || pumpSparePartCosts == null) {
                    continue;  
                }
                else {
                    SparePartCost c_diffuser = getValue(diffuser, k, i);
                    SparePartCost c_flangs = getValue(flangs, k, i);
                    SparePartCost c_impeller = getValue(impeller, k, i);
                    SparePartCost c_mSeal = getValue(mSeal, k, i);
                    SparePartCost c_oilH = getValue(oilH, k, i);
                    SparePartCost c_rValve = getValue(rValve, k, i);
                    SparePartCost c_seal = getValue(seal, k, i);
                    SparePartCost c_shaft = getValue(shaft, k, i);
                    SparePartCost c_shaftSeal = getValue(shaftSeal, k, i);
                    SparePartCost c_sCover = getValue(sCover, k, i);
                    SparePartCost c_washers = getValue(washers, k, i);
                    SparePartCost c_oRing = getValue(oRing, k, i);
                    SparePartCost c_bearing = getValue(bearing, k, i);
                    SparePartCost c_other = getValue(other, k, i);
                    
                    
                    column[k] = column[k] +
                            row.get(i)*
                            (
                            c_diffuser.getAmount()*c_diffuser.getUnitCost() +
                            c_flangs.getAmount()*c_flangs.getUnitCost() +
                            c_impeller.getAmount()*c_impeller.getUnitCost() +
                            c_mSeal.getAmount()*c_mSeal.getUnitCost() +
                            c_oilH.getAmount()*c_oilH.getUnitCost() +
                            c_rValve.getAmount()*c_rValve.getUnitCost() +
                            c_seal.getAmount()*c_seal.getUnitCost() +
                            c_shaft.getAmount()*c_shaft.getUnitCost() +
                            c_shaftSeal.getAmount()*c_shaftSeal.getUnitCost() +
                            c_sCover.getAmount()*c_sCover.getUnitCost() +
                            c_washers.getAmount()*c_washers.getUnitCost() +
                            c_oRing.getAmount()*c_oRing.getUnitCost() +
                            c_bearing.getAmount()*c_bearing.getUnitCost() +
                            c_other.getAmount()*c_other.getUnitCost()
                            );
                }
                }
            }
            return column;
    }
    
    public void initSubmersibleSparePartCalculateTable(){
        int years = study.getYearCount();

        DefaultTableModel model = new DefaultTableModel();
        Integer[] firstColumn = new Integer[years];
        for(int j = 0; j < years; j++) {
            firstColumn[j] = j;
        }
        model.addColumn("Year", firstColumn);
        String[] column = getTwoDigitPresicion(calculateSubmersibleSparePartCost());
        model.addColumn("Spare Part Cost ($)", column);
        
        calculateTable.setModel(model);
    }
    

    Double[] calculateHorizontalSparePartCost(){
        int years = study.getYearCount();
        int types = study.getHorizontalTypeCount();

        PumpSparePartCosts pumpSparePartCosts = study.getHorizontalSparePartCost();
        Vector<Vector<Integer>> pumpAmounts = study.getHorizontalPumpAmounts();
        Vector< Vector<SparePartCost>> diffuser = pumpSparePartCosts.getDiffuserCoatCost().getCosts();
        Vector< Vector<SparePartCost>> flangs = pumpSparePartCosts.getFlangsCost().getCosts();
        Vector< Vector<SparePartCost>> impeller = pumpSparePartCosts.getImpellerCost().getCosts();
        Vector< Vector<SparePartCost>> mSeal = pumpSparePartCosts.getMechanicalSealCost().getCosts();
        Vector< Vector<SparePartCost>> oilH = pumpSparePartCosts.getOilHousingCost().getCosts();
        Vector< Vector<SparePartCost>> rValve = pumpSparePartCosts.getReliefValveCost().getCosts();
        Vector< Vector<SparePartCost>> seal = pumpSparePartCosts.getSealCost().getCosts();
        Vector< Vector<SparePartCost>> shaft = pumpSparePartCosts.getShaftCost().getCosts();
        Vector< Vector<SparePartCost>> shaftSeal = pumpSparePartCosts.getShaftSealCost().getCosts();
        Vector< Vector<SparePartCost>> sCover = pumpSparePartCosts.getSuctionCoverCost().getCosts();
        Vector< Vector<SparePartCost>> washers = pumpSparePartCosts.getWashersCost().getCosts();
        Vector< Vector<SparePartCost>> oRing = pumpSparePartCosts.getoRingKitCost().getCosts();
        Vector< Vector<SparePartCost>> bearing = pumpSparePartCosts.getBearingsCost().getCosts();
        Vector< Vector<SparePartCost>> other = pumpSparePartCosts.getOtherCost().getCosts();
        
        
            Double[] column = new Double[years];
            for(int k = 0; k < years; k++) {
                if(pumpAmounts == null || pumpAmounts.size() <= k) {
                    column[k] = 0.0;
                    continue;
                }
                column[k] = 0.0;
                Vector<Integer> row = pumpAmounts.get(k);
                for(int i = 0; i < types; i++) {
                if(row == null || row.size() <= i || pumpSparePartCosts == null) {
                    continue;  
                }
                else {
                    SparePartCost c_diffuser = getValue(diffuser, k, i);
                    SparePartCost c_flangs = getValue(flangs, k, i);
                    SparePartCost c_impeller = getValue(impeller, k, i);
                    SparePartCost c_mSeal = getValue(mSeal, k, i);
                    SparePartCost c_oilH = getValue(oilH, k, i);
                    SparePartCost c_rValve = getValue(rValve, k, i);
                    SparePartCost c_seal = getValue(seal, k, i);
                    SparePartCost c_shaft = getValue(shaft, k, i);
                    SparePartCost c_shaftSeal = getValue(shaftSeal, k, i);
                    SparePartCost c_sCover = getValue(sCover, k, i);
                    SparePartCost c_washers = getValue(washers, k, i);
                    SparePartCost c_oRing = getValue(oRing, k, i);
                    SparePartCost c_bearing = getValue(bearing, k, i);
                    SparePartCost c_other = getValue(other, k, i);
                    
                    
                    column[k] = column[k] +
                            row.get(i)*
                            (
                            c_diffuser.getAmount()*c_diffuser.getUnitCost() +
                            c_flangs.getAmount()*c_flangs.getUnitCost() +
                            c_impeller.getAmount()*c_impeller.getUnitCost() +
                            c_mSeal.getAmount()*c_mSeal.getUnitCost() +
                            c_oilH.getAmount()*c_oilH.getUnitCost() +
                            c_rValve.getAmount()*c_rValve.getUnitCost() +
                            c_seal.getAmount()*c_seal.getUnitCost() +
                            c_shaft.getAmount()*c_shaft.getUnitCost() +
                            c_shaftSeal.getAmount()*c_shaftSeal.getUnitCost() +
                            c_sCover.getAmount()*c_sCover.getUnitCost() +
                            c_washers.getAmount()*c_washers.getUnitCost() +
                            c_oRing.getAmount()*c_oRing.getUnitCost() +
                            c_bearing.getAmount()*c_bearing.getUnitCost() +
                            c_other.getAmount()*c_other.getUnitCost()
                            );
                }
                }
            }
            return column;
    }
    
    public void initHorizontalSparePartCalculateTable(){
        int years = study.getYearCount();

        DefaultTableModel model = new DefaultTableModel();
        Integer[] firstColumn = new Integer[years];
        for(int j = 0; j < years; j++) {
            firstColumn[j] = j;
        }
        model.addColumn("Year", firstColumn);
        String[] column = getTwoDigitPresicion(calculateHorizontalSparePartCost());
        model.addColumn("Spare Part Cost ($)", column);
        
        calculateTable.setModel(model);
    }
    
    Double[] calculateSubmersibleMaintenanceCost(){
        int years = study.getYearCount();

        Double[] hours = new Double[years];
        Double[] salary = new Double[years];
        Integer[] crewNumber = new Integer[years];
        
        Cost eCost = study.getSubmersibleMaintenanceCost();
        if(eCost.getType().equals(Cost.COST_RISE_PERCENTAGE)) {
            MaintenancePercentageCost pCost = (MaintenancePercentageCost)eCost;
            int bValue1 = pCost.getCrewNumber();
            int percentage1 = pCost.getPercentage();
            double bValue2 = pCost.getSalary();
            int percentage2 = pCost.getPercentage();
            double bValue3 = pCost.getHours();
            int percentage3 = pCost.getPercentage();
            for(int k = 0; k < years; k++) {
                crewNumber[k] = bValue1;
                bValue1 = bValue1 + bValue1*percentage1/100;
                salary[k] = bValue2;
                bValue2 = bValue2 + bValue2*percentage2/100;
                hours[k] = bValue3;
                bValue3 = bValue3 + bValue3*percentage3/100;
            }
        }
        else if(eCost.getType().equals(Cost.COST_RISE_USER_DEFINED)) {
            MaintenanceUserDefinedCost pCost = (MaintenanceUserDefinedCost)eCost;
            Vector<Integer> crewV= pCost.getCrewNumbers();
            Vector<Double> salaryV= pCost.getSalaries();
            Vector<Double> hourV= pCost.getHourValues();
            for(int k = 0; k < years; k++) {
                crewNumber[k] = crewV.get(k);
                salary[k] = salaryV.get(k);
                hours[k] = hourV.get(k);
            }
        }
        
            Double[] column = new Double[years];
            for(int k = 0; k < years; k++) {
                column[k] = crewNumber[k] * salary[k] * hours[k];
            }
            return column;
    }
    
    public void initSubmersibleMaintenanceCalculateTable(){
        int years = study.getYearCount();

        DefaultTableModel model = new DefaultTableModel();
        Integer[] firstColumn = new Integer[years];

        for(int j = 0; j < years; j++) {
            firstColumn[j] = j;
        }
        model.addColumn("Year", firstColumn);
        String[] column = getTwoDigitPresicion(calculateSubmersibleMaintenanceCost());
        model.addColumn("Maintenance Cost ($)", column);
        
        calculateTable.setModel(model);
    }
    
    Double[] calculateHorizontalMaintenanceCost(){
        int years = study.getYearCount();

        Double[] hours = new Double[years];
        Double[] salary = new Double[years];
        Integer[] crewNumber = new Integer[years];
        
        Cost eCost = study.getHorizontalMaintenanceCost();
        if(eCost.getType().equals(Cost.COST_RISE_PERCENTAGE)) {
            MaintenancePercentageCost pCost = (MaintenancePercentageCost)eCost;
            int bValue1 = pCost.getCrewNumber();
            int percentage1 = pCost.getPercentage();
            double bValue2 = pCost.getSalary();
            int percentage2 = pCost.getPercentage();
            double bValue3 = pCost.getHours();
            int percentage3 = pCost.getPercentage();
            for(int k = 0; k < years; k++) {
                crewNumber[k] = bValue1;
                bValue1 = bValue1 + bValue1*percentage1/100;
                salary[k] = bValue2;
                bValue2 = bValue2 + bValue2*percentage2/100;
                hours[k] = bValue3;
                bValue3 = bValue3 + bValue3*percentage3/100;
            }
        }
        else if(eCost.getType().equals(Cost.COST_RISE_USER_DEFINED)) {
            MaintenanceUserDefinedCost pCost = (MaintenanceUserDefinedCost)eCost;
            Vector<Integer> crewV= pCost.getCrewNumbers();
            Vector<Double> salaryV= pCost.getSalaries();
            Vector<Double> hourV= pCost.getHourValues();
            for(int k = 0; k < years; k++) {
                crewNumber[k] = crewV.get(k);
                salary[k] = salaryV.get(k);
                hours[k] = hourV.get(k);
            }
        }
        
            Double[] column = new Double[years];
            for(int k = 0; k < years; k++) {
                column[k] = crewNumber[k] * salary[k] * hours[k];
            }
           return column;
    }
    
    public void initHorizontalMaintenanceCalculateTable(){
        int years = study.getYearCount();

        DefaultTableModel model = new DefaultTableModel();
        Integer[] firstColumn = new Integer[years];
        for(int j = 0; j < years; j++) {
            firstColumn[j] = j;
        }
        model.addColumn("Year", firstColumn);
        String[] column = getTwoDigitPresicion(calculateHorizontalMaintenanceCost());
        model.addColumn("Maintenance Cost ($)", column);
        
        calculateTable.setModel(model);
    }
    
    Double[] calculateSubmersiblePipingCost(){
        int years = study.getYearCount();

        Double[] piping = new Double[years];
        
        Cost eCost = study.getSubmersiblePipingCost();
        if(eCost.getType().equals(Cost.COST_RISE_PERCENTAGE)) {
            PercentageCost pCost = (PercentageCost)eCost;
            double bValue1 = pCost.getBaseValue();
            int percentage1 = pCost.getPercentage();
            for(int k = 0; k < years; k++) {
                piping[k] = bValue1;
                bValue1 = bValue1 + bValue1*percentage1/100;
            }
        }
        else if(eCost.getType().equals(Cost.COST_RISE_USER_DEFINED)) {
            UserDefinedCost pCost = (UserDefinedCost)eCost;
            Vector<Double> pipingV= pCost.getCostValues();
            for(int k = 0; k < years; k++) {
                piping[k] = pipingV.get(k);
            }
        }
        return piping;
    }
    
    public void initSubmersiblePipingCalculateTable(){
        int years = study.getYearCount();

        DefaultTableModel model = new DefaultTableModel();
        Integer[] firstColumn = new Integer[years];
        
        for(int j = 0; j < years; j++) {
            firstColumn[j] = j;
        }
        model.addColumn("Year", firstColumn);
        String[] piping = getTwoDigitPresicion(calculateSubmersiblePipingCost());
        model.addColumn("Piping Cost ($)", piping);
        
        calculateTable.setModel(model);
    }
    
    Double[] calculateHorizontalPipingCost(){
        int years = study.getYearCount();

        Double[] piping = new Double[years];
        
        Cost eCost = study.getHorizontalPipingCost();
        if(eCost.getType().equals(Cost.COST_RISE_PERCENTAGE)) {
            PercentageCost pCost = (PercentageCost)eCost;
            double bValue1 = pCost.getBaseValue();
            int percentage1 = pCost.getPercentage();
            for(int k = 0; k < years; k++) {
                piping[k] = bValue1;
                bValue1 = bValue1 + bValue1*percentage1/100;
            }
        }
        else if(eCost.getType().equals(Cost.COST_RISE_USER_DEFINED)) {
            UserDefinedCost pCost = (UserDefinedCost)eCost;
            Vector<Double> pipingV= pCost.getCostValues();
            for(int k = 0; k < years; k++) {
                piping[k] = pipingV.get(k);
            }
        }
        return piping;
    }
    
    public void initHorizontalPipingCalculateTable(){
        int years = study.getYearCount();

        DefaultTableModel model = new DefaultTableModel();
        Integer[] firstColumn = new Integer[years];
        
        for(int j = 0; j < years; j++) {
            firstColumn[j] = j;
        }
        model.addColumn("Year", firstColumn);
        String[] piping = getTwoDigitPresicion(calculateHorizontalPipingCost());
        model.addColumn("Piping Cost ($)", piping);
        
        calculateTable.setModel(model);
    }
    
    Double[] calculateSubmersibleSumpCost(){
        int years = study.getYearCount();

        Cost cost = study.getSubmersibleSumpCost();
        Double[] advance = new Double[years];
        Integer[] amount = new Integer[years];
        Double[] size = new Double[years];
        if(cost.getType().equals(Cost.COST_RISE_PERCENTAGE)) {
            SumpPercentageCost pCost = (SumpPercentageCost)cost;
            double bValue1 = pCost.getBaseValue();
            int percentage1 = pCost.getPercentage();
            for(int k = 0; k < years; k++) {
                advance[k] = bValue1;
                bValue1 = bValue1 + bValue1*percentage1/100;
                Vector<Integer> amountV = pCost.getAmounts();
                Vector<Double> sizeV = pCost.getSizes();
                if(k < amountV.size()){
                    amount[k] = amountV.get(k);
                }
                else {
                    amount[k] = 0;
                }
                if(k < sizeV.size()){
                    size[k] = sizeV.get(k);
                }
                else {
                    size[k] = 0.0;
                }
            }
        }
        else if(cost.getType().equals(Cost.COST_RISE_USER_DEFINED)) {
            SumpUserDefinedCost pCost = (SumpUserDefinedCost)cost;
            Vector<Double> advanceV= pCost.getCostValues();
            for(int k = 0; k < years; k++) {
                if(k < advanceV.size()){
                    advance[k] = advanceV.get(k);
                }
                else {
                    advance[k] = 0.0;
                }
                Vector<Integer> amountV = pCost.getAmounts();
                Vector<Double> sizeV = pCost.getSizes();
                if(k < amountV.size()){
                    amount[k] = amountV.get(k);
                }
                else {
                    amount[k] = 0;
                }
                if(k < sizeV.size()){
                    size[k] = sizeV.get(k);
                }
                else {
                    size[k] = 0.0;
                }
                
            }
        }
        
            Double[] column = new Double[years];
            for(int k = 0; k < years; k++) {
                column[k] = 0.0;
                column[k] = advance[k] * amount[k] * size[k];
            }
        return column;
    }
    
    public void initSubmersibleSumpCalculateTable(){
        int years = study.getYearCount();

        DefaultTableModel model = new DefaultTableModel();
        Integer[] firstColumn = new Integer[years];
        for(int j = 0; j < years; j++) {
            firstColumn[j] = j;
        }
        model.addColumn("Year", firstColumn);
        String[] column = getTwoDigitPresicion(calculateSubmersibleSumpCost());
        model.addColumn("Sump Cost ($)", column);
        
        calculateTable.setModel(model);
    }
    
    Double[] calculateHorizontalSumpCost(){
        int years = study.getYearCount();

        Cost cost = study.getHorizontalSumpCost();
        Double[] advance = new Double[years];
        Integer[] amount = new Integer[years];
        Double[] size = new Double[years];
        if(cost.getType().equals(Cost.COST_RISE_PERCENTAGE)) {
            SumpPercentageCost pCost = (SumpPercentageCost)cost;
            double bValue1 = pCost.getBaseValue();
            int percentage1 = pCost.getPercentage();
            for(int k = 0; k < years; k++) {
                advance[k] = bValue1;
                bValue1 = bValue1 + bValue1*percentage1/100;
                Vector<Integer> amountV = pCost.getAmounts();
                Vector<Double> sizeV = pCost.getSizes();
                if(k < amountV.size()){
                    amount[k] = amountV.get(k);
                }
                else {
                    amount[k] = 0;
                }
                if(k < sizeV.size()){
                    size[k] = sizeV.get(k);
                }
                else {
                    size[k] = 0.0;
                }
            }
        }
        else if(cost.getType().equals(Cost.COST_RISE_USER_DEFINED)) {
            SumpUserDefinedCost pCost = (SumpUserDefinedCost)cost;
            Vector<Double> advanceV= pCost.getCostValues();
            for(int k = 0; k < years; k++) {
                if(k < advanceV.size()){
                    advance[k] = advanceV.get(k);
                }
                else {
                    advance[k] = 0.0;
                }
                Vector<Integer> amountV = pCost.getAmounts();
                Vector<Double> sizeV = pCost.getSizes();
                if(k < amountV.size()){
                    amount[k] = amountV.get(k);
                }
                else {
                    amount[k] = 0;
                }
                if(k < sizeV.size()){
                    size[k] = sizeV.get(k);
                }
                else {
                    size[k] = 0.0;
                }
                
            }
        }
        
            Double[] column = new Double[years];
            for(int k = 0; k < years; k++) {
                column[k] = 0.0;
                column[k] = advance[k] * amount[k] * size[k];
            }
        return column;
    }
    
    public void initHorizontalSumpCalculateTable(){
        int years = study.getYearCount();

        DefaultTableModel model = new DefaultTableModel();
        Integer[] firstColumn = new Integer[years];
        
        for(int j = 0; j < years; j++) {
            firstColumn[j] = j;
        }
        model.addColumn("Year", firstColumn);
        String[] column = getTwoDigitPresicion(calculateHorizontalSumpCost());
        model.addColumn("Sump Cost ($)", column);
        
        calculateTable.setModel(model);
    }
    

    Double[] calculateSubmersibleSumpCleanCost(){
        int years = study.getYearCount();

        Cost eCost = study.getSubmersibleSumpCleanCost();
        Double[] column = new Double[years];
        if(eCost.getType().equals(Cost.COST_RISE_PERCENTAGE)) {
            PercentageCost pCost = (PercentageCost)eCost;
            double bValue1 = pCost.getBaseValue();
            int percentage1 = pCost.getPercentage();
            for(int k = 0; k < years; k++) {
                column[k] = bValue1;
                bValue1 = bValue1 + bValue1*percentage1/100;
            }
        }
        else if(eCost.getType().equals(Cost.COST_RISE_USER_DEFINED)) {
            UserDefinedCost pCost = (UserDefinedCost)eCost;
            Vector<Double> sumpCleanV= pCost.getCostValues();
            for(int k = 0; k < years; k++) {
                column[k] = sumpCleanV.get(k);
            }
        }
   
        return column;
    }
    
        public void initSubmersibleSumpCleanCalculateTable(){
        int years = study.getYearCount();

        DefaultTableModel model = new DefaultTableModel();
        Integer[] firstColumn = new Integer[years];
        for(int j = 0; j < years; j++) {
            firstColumn[j] = j;
        }
        model.addColumn("Year", firstColumn);
        String[] column = getTwoDigitPresicion(calculateSubmersibleSumpCleanCost());
        model.addColumn("Cleaning Cost ($)", column);
        
        calculateTable.setModel(model);
    }
    
    Double[] calculateHorizontalSumpCleanCost(){
        int years = study.getYearCount();

        Cost eCost = study.getHorizontalSumpCleanCost();
        Double[] column = new Double[years];
        if(eCost.getType().equals(Cost.COST_RISE_PERCENTAGE)) {
            PercentageCost pCost = (PercentageCost)eCost;
            double bValue1 = pCost.getBaseValue();
            int percentage1 = pCost.getPercentage();
            for(int k = 0; k < years; k++) {
                column[k] = bValue1;
                bValue1 = bValue1 + bValue1*percentage1/100;
            }
        }
        else if(eCost.getType().equals(Cost.COST_RISE_USER_DEFINED)) {
            UserDefinedCost pCost = (UserDefinedCost)eCost;
            Vector<Double> sumpCleanV= pCost.getCostValues();
            for(int k = 0; k < years; k++) {
                column[k] = sumpCleanV.get(k);
            }
        }
        return column;
    }
      
    public void initHorizontalSumpCleanCalculateTable(){
        int years = study.getYearCount();

        DefaultTableModel model = new DefaultTableModel();
        Integer[] firstColumn = new Integer[years];
        
        for(int j = 0; j < years; j++) {
            firstColumn[j] = j;
        }
        model.addColumn("Year", firstColumn);
        String[] column = getTwoDigitPresicion(calculateHorizontalSumpCleanCost());
        model.addColumn("Cleaning Cost ($)", column);
        
        calculateTable.setModel(model);
    }
    
    
    Double[] calculateSubmersibleInvestmentCost(){
        int years = study.getYearCount();
        int typeCount = study.getSubmersibleTypeCount();

        BaseCosts bCost = study.getSubmersibleBaseCosts();
        Vector<Vector<Double>> costs = bCost.getPumpInvestmentCosts();
        Vector<Vector<Integer>> pumpAmounts = study.getSubmersiblePumpAmounts();
        Double[] column = new Double[years];
        int[] prevs = new int[typeCount];
        for(int k = 0; k < years; k++) {
            if(pumpAmounts == null || pumpAmounts.size() <= k) {
                    column[k] = 0.0;
                    continue;
                }
            column[k] = 0.0;
            Vector<Integer> row = pumpAmounts.get(k);
            Vector<Double> values = null;
                    
            if(costs != null && costs.size() > k ){
                values = costs.get(k);
            }
         
            for(int t=0; t< typeCount; t++){
                int cnt = row.get(t) - prevs[t];
                prevs[t] = row.get(t);
                if(values != null && values.size() > t) {
                    column[k] = column[k] + cnt * values.get(t);
                }
                
            }
            
        }
        return column;
    }
      
    public void initSubmersibleInvestmentCalculateTable(){
        int years = study.getYearCount();

        DefaultTableModel model = new DefaultTableModel();
        Integer[] firstColumn = new Integer[years];
        
        for(int j = 0; j < years; j++) {
            firstColumn[j] = j;
        }
        model.addColumn("Year", firstColumn);
        String[] column = getTwoDigitPresicion(calculateSubmersibleInvestmentCost());
        model.addColumn("Investment Cost ($)", column);
        
        calculateTable.setModel(model);
    }
    
Double[] calculateHorizontalInvestmentCost(){
        int years = study.getYearCount();
        int typeCount = study.getHorizontalTypeCount();
        
        BaseCosts bCost = study.getHorizontalBaseCosts();
        Vector<Vector<Double>> costs = bCost.getPumpInvestmentCosts();
        Vector<Vector<Integer>> pumpAmounts = study.getHorizontalPumpAmounts();
        Double[] column = new Double[years];
        int[] prevs = new int[typeCount];
            for(int k = 0; k < years; k++) {
            if(pumpAmounts == null || pumpAmounts.size() <= k) {
                    column[k] = 0.0;
                    continue;
                }
            column[k] = 0.0;
            Vector<Integer> row = pumpAmounts.get(k);
            Vector<Double> values = null;
            if(costs != null && costs.size() > k ){
                values = costs.get(k);
            }
            
            for(int t=0; t< typeCount; t++){
                int cnt = row.get(t) - prevs[t];
                prevs[t] = row.get(t);
                if(values != null && values.size() > t) {
                    column[k] = column[k] + cnt * values.get(t);
                }
            }
            
        }
        return column;
    }

    public void initHorizontalInvestmentCalculateTable(){
        int years = study.getYearCount();

        DefaultTableModel model = new DefaultTableModel();
        Integer[] firstColumn = new Integer[years];
        
        for(int j = 0; j < years; j++) {
            firstColumn[j] = j;
        }
        model.addColumn("Year", firstColumn);
        String[] column = getTwoDigitPresicion(calculateHorizontalInvestmentCost());
        model.addColumn("Investment Cost ($)", column);
        
        calculateTable.setModel(model);
    }
    
    double[] calculateSubmersibleAmortization(){
        int years = study.getYearCount();
        int typeCount = study.getSubmersibleTypeCount();

        BaseCosts bCost = study.getSubmersibleBaseCosts();
        Vector<Vector<Double>> costs = bCost.getPumpInvestmentCosts();
        Vector<Vector<Double>> buyBackCosts = bCost.getBuyBackCosts();
        Vector<Vector<Integer>> pumpAmounts = study.getSubmersiblePumpAmounts();
        Vector<PumpProperties> pumpProperties = study.getSubmersiblePumpProperties();
        double[] column = new double[years];
        int[] prevs = new int[typeCount];
        for(int k = 0; k < years; k++) {
            if(pumpAmounts == null || pumpAmounts.size() <= k) {
                    column[k] = 0.0;
                    continue;
                }
            Vector<Integer> row = pumpAmounts.get(k);
            if(costs.isEmpty()) return column;
            Vector<Double> values = costs.get(k);
            Vector<Double> bbValues = buyBackCosts.get(k);          
            for(int t=0; t< typeCount; t++){
                int cnt = row.get(t) - prevs[t];
                if(cnt < 0) cnt = 0;
                prevs[t] = row.get(t);
                PumpProperties pProp = pumpProperties.get(t);
                for(int p = k; p < years ; p++) {
                        if(values == null && values.get(t) == null) {
                            column[p] = column[p] + 0.0;
                        }
                        else
                        {
                            if(pProp.getLifeTime() == 0) {
                                column[p] = column[p] + 0;
                            }
                            else {
                                column[p] = column[p] + cnt * (p-k+1) * ((values.get(t) - bbValues.get(t))/pProp.getLifeTime());
                            }               
                        }
                }
            }
        }
        return column;
    }
    
    double[] calculateHorizontalAmortization(){
        int years = study.getYearCount();
        int typeCount = study.getHorizontalTypeCount();

        BaseCosts bCost = study.getHorizontalBaseCosts();
        Vector<Vector<Double>> costs = bCost.getPumpInvestmentCosts();
        Vector<Vector<Double>> buyBackCosts = bCost.getBuyBackCosts();
        Vector<Vector<Integer>> pumpAmounts = study.getHorizontalPumpAmounts();
        Vector<PumpProperties> pumpProperties = study.getHorizontalPumpProperties();
        double[] column = new double[years];
        int[] prevs = new int[typeCount];
        for(int k = 0; k < years; k++) {
            if(pumpAmounts == null || pumpAmounts.size() <= k) {
                    column[k] = 0.0;
                    continue;
                }
            Vector<Integer> row = pumpAmounts.get(k);
            if(costs.isEmpty()) return column;
            Vector<Double> values = costs.get(k);
            Vector<Double> bbValues = buyBackCosts.get(k);          
            for(int t=0; t< typeCount; t++){
                int cnt = row.get(t) - prevs[t];
                if(cnt < 0) cnt = 0;
                prevs[t] = row.get(t);
                PumpProperties pProp = pumpProperties.get(t);
                for(int p = k; p < years ; p++) {
                        if(values == null && values.get(t) == null) {
                            column[p] = column[p] + 0.0;
                        }
                        else
                        {
                            if(pProp.getLifeTime() == 0) {
                                column[p] = column[p] + 0.0;
                            }
                            else {
                                column[p] = column[p] + cnt * (p-k+1) * ((values.get(t) - bbValues.get(t))/pProp.getLifeTime());
                            }
                        }
                }
            }
        }
        return column;
    }
    
    Double[] calculateSubmersibleAll(){
        int years = study.getYearCount();
        Double [] energy = calculateSubmersibleEnergyCost();
        Double [] piping = calculateSubmersiblePipingCost();
        Double [] spare = calculateSubmersibleSparePartCost();
        Double [] maintenance = calculateSubmersibleMaintenanceCost();
        Double [] sump = calculateSubmersibleSumpCost();
        Double [] sumpClean = calculateSubmersibleSumpCleanCost();
        Double [] investment = calculateSubmersibleInvestmentCost();
        double [] amortization = calculateSubmersibleAmortization();
        Double [] all = new Double[years];
        for(int j = 0; j < years; j++) {
            all[j] = energy[j]
                    + piping[j]
                    + spare[j]
                    + maintenance[j]
                    + sump[j]
                    + sumpClean[j]
                    + investment[j]
                    - amortization[j];
                    
        }
        return all;
    }
    
    Double[] calculateHorizontalAll(){
        int years = study.getYearCount();
        Double [] energy = calculateHorizontalEnergyCost();
        Double [] piping = calculateHorizontalPipingCost();
        Double [] spare = calculateHorizontalSparePartCost();
        Double [] maintenance = calculateHorizontalMaintenanceCost();
        Double [] sump = calculateHorizontalSumpCost();
        Double [] sumpClean = calculateHorizontalSumpCleanCost();
        Double [] investment = calculateHorizontalInvestmentCost();
        double [] amortization = calculateHorizontalAmortization();
        Double [] all = new Double[years];
        for(int j = 0; j < years; j++) {
            all[j] = energy[j]
                    + piping[j]
                    + spare[j]
                    + maintenance[j]
                    + sump[j]
                    + sumpClean[j]
                    + investment[j]
                    - amortization[j];
                    
        }
        return all;
    }
    
    public void initSubmersibleAllCalculateTable(){
        int years = study.getYearCount();

        DefaultTableModel model = new DefaultTableModel();
        Integer[] firstColumn = new Integer[years];
        
        for(int j = 0; j < years; j++) {
            firstColumn[j] = j;
        }
        model.addColumn("Year", firstColumn);
        String[] column = getTwoDigitPresicion(calculateSubmersibleAll());
        model.addColumn("Cash Flow ($)", column);
        
        calculateTable.setModel(model);
    }
    
    public void initHorizontalAllCalculateTable(){
        int years = study.getYearCount();

        DefaultTableModel model = new DefaultTableModel();
        Integer[] firstColumn = new Integer[years];
        
        for(int j = 0; j < years; j++) {
            firstColumn[j] = j;
        }
        model.addColumn("Year", firstColumn);
        String[] column = getTwoDigitPresicion(calculateHorizontalAll());
        model.addColumn("Cash Flow ($)", column);
        
        calculateTable.setModel(model);
    }
    
    public Double calculateSubmersibleNPV(){
        int yearCount = study.getYearCount();
        Double [] costs = calculateSubmersibleAll();
        Vector<Double> interest = study.getSubmersibleBaseCosts().getInterestValues();
        Double NPV = 0.0;
        for(int i = 0; i < yearCount; i++){
            double interestValue = 0.0;
            if(interest.size() > i){
                interestValue = interest.get(i);
            }
            NPV = NPV + (costs[i] / Math.pow(1+(interestValue/100), i));
        }
        return NPV;
    }
    
    public Double calculateHorizontalNPV(){
        int yearCount = study.getYearCount();
        Double [] costs = calculateHorizontalAll();
        Vector<Double> interest = study.getHorizontalBaseCosts().getInterestValues();
        Double NPV = 0.0;
        for(int i = 0; i < yearCount; i++){
            double interestValue = 0.0;
            if(interest.size() > i){
                interestValue = interest.get(i);
            }
            NPV = NPV + (costs[i] / Math.pow(1+(interestValue/100), i));
        }
        return NPV;
    }
    
    
    
    /* Utils */
    
    private SparePartCost getValue(Vector< Vector <SparePartCost>> vector, int x, int y) {
        if(vector.size() > x && vector.get(x).size() > y)
            return vector.get(x).get(y);
        else
            return new SparePartCost(0.0, 0.0);
    }
    
    private String[] getTwoDigitPresicion(Double[] input) {
        String[] output = new String[input.length];
        for(int i = 0; i < input.length; i++)
        {
            output[i] = new DecimalFormat("#.#").format(input[i]);
        }
        return output;
    }
    
}
