/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication.ui;

import static java.awt.image.ImageObserver.WIDTH;
import java.util.Iterator;
import java.util.Vector;
import javaapplication.PumpSparePartCost;
import javaapplication.PumpSparePartCosts;
import javaapplication.SpareCostTableModel;
import javaapplication.SparePartCost;
import javax.swing.JComboBox;

/**
 *
 * @author soner
 */
public class SparePartCostPanel extends javax.swing.JPanel {
    
    private int typeCount;
    private int yearCount;
    Vector<PumpSparePartCost> curCosts;
    int prevSelectedIndex;
    private String selection;

    /**
     * Creates new form SparePartCostPanel
     */
    public SparePartCostPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        spareCostTable = new javax.swing.JTable();
        spareCombo = new javax.swing.JComboBox();

        setAutoscrolls(true);
        setName("Spare Part Costs"); // NOI18N

        spareCostTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        spareCostTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        spareCostTable.setRowHeight(60);
        spareCostTable.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(spareCostTable);

        spareCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spareComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(spareCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(spareCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("Spare Part Costs");
    }// </editor-fold>//GEN-END:initComponents

    private void spareComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spareComboActionPerformed
        JComboBox cb = (JComboBox)evt.getSource();
        selection = (String)cb.getSelectedItem();
        getTableValues();
        updateCostPanel(selection);
        prevSelectedIndex = cb.getSelectedIndex();
    }//GEN-LAST:event_spareComboActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox spareCombo;
    private javax.swing.JTable spareCostTable;
    // End of variables declaration//GEN-END:variables

    
    private void getTableValues() {
        if (prevSelectedIndex != -1) {
            Vector< Vector<SparePartCost>> values = new Vector< Vector<SparePartCost>>();
            for (int i = 0; i < spareCostTable.getRowCount(); i++) {
                Vector<SparePartCost> typeVal = new Vector<SparePartCost>();
                for (int j = 1; j < spareCostTable.getColumnCount(); j++) {
                    SparePartCost cost = (SparePartCost) spareCostTable.getValueAt(i, j);
                    typeVal.add(cost);
                }
                values.add(typeVal);
            }
            String name = (String) spareCombo.getItemAt(prevSelectedIndex);
            for (int k = 0; k < curCosts.size(); k++) {
                if (curCosts.get(k) != null && curCosts.get(k).getName().equals(name)) {
                    curCosts.get(k).setCosts(values);
                }
            }
        }
    }
   private void updateCostPanel(String selection) {
       SpareCostTableModel model = new SpareCostTableModel();
       model.addColumn("Year");
       for(int i = 0; i< typeCount; i++) {
           model.addColumn("Type " + Integer.toString(i+1));
       }

       for(int i = 0; i < curCosts.size(); i++) {
           PumpSparePartCost cost = curCosts.get(i);
           if(cost.getName().equals(selection)){
               for(int j = 0; j < yearCount; j++) {
                   Vector<Object> values = new Vector<>();
                   values.clear();
                   values.add(Integer.toString(j+1));
                   Vector<SparePartCost> typeCosts = null;
                   if(cost.getCosts().size() > j) {
                       typeCosts = cost.getCosts().get(j);
                   }
                   
                    for (int k = 0; k < typeCount; k++) {
                            if (typeCosts != null && typeCosts.size() > k) {
                                    values.add(typeCosts.get(k));
                            } else {
                                    values.add(new SparePartCost(0.0, 0.0));
                            }
                    }
                    model.addRow(values);
               }
               
           }
       }
       
      spareCostTable.setDefaultRenderer(SparePartCost.class, new ValueRenderer());
      spareCostTable.setDefaultEditor(SparePartCost.class, new ValueEditor());
      spareCostTable.setModel(model);
            
      int columns = spareCostTable.getColumnCount();
      for(int j = 0; j< columns; j++) {
          spareCostTable.getColumnModel().getColumn(j).setPreferredWidth(110);
      }
            
    }
        
    public void initCostPanel(PumpSparePartCosts costs, int typeCnt, int yearCnt) {
            typeCount = typeCnt;
            yearCount = yearCnt;
            curCosts = costs.getCosts();
            spareCombo.removeAllItems();
            prevSelectedIndex = -1;
            for(int i = 0; i < curCosts.size(); i++){
                String name = curCosts.get(i).getName();
                spareCombo.addItem(name);
            }
            spareCombo.setSelectedIndex(0);
    }
    
    public PumpSparePartCosts getCosts(){
        getTableValues();
        PumpSparePartCosts newCosts = new PumpSparePartCosts();
        newCosts.setCosts(curCosts);
        return newCosts;
    }

}
