/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication.ui;

import com.thoughtworks.xstream.XStream;
import java.util.Vector;
import javaapplication.Cost;
import javaapplication.CostDefaultTableModel;
import javaapplication.MaintenanceCostDefaultTableModel;
import javaapplication.MaintenancePercentageCost;
import javaapplication.MaintenanceUserDefinedCost;
import javax.swing.JComboBox;

/**
 *
 * @author soner
 */
public class MaintenanceCostPanel extends javax.swing.JPanel {

    private String selection = "Percentage";
    private int yearCount = 0;
    /**
     * Creates new form CostPanel
     */
    public MaintenanceCostPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CostCB = new javax.swing.JComboBox();
        costTablePane = new javax.swing.JScrollPane();
        costTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        crewNumber = new javax.swing.JTextField();
        percentage = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        salary = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        percentage1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        hours = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        percentage2 = new javax.swing.JTextField();

        setToolTipText("");
        setName("costPanel"); // NOI18N

        CostCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Percentage", "User Defined" }));
        CostCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CostCBActionPerformed(evt);
            }
        });

        costTablePane.setBorder(null);

        costTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        costTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        costTable.setName(""); // NOI18N
        costTable.getTableHeader().setReorderingAllowed(false);
        costTablePane.setViewportView(costTable);

        jLabel4.setText("Crew Numbers");

        jLabel5.setText("Increase Percent(%)");

        crewNumber.setText("0");
        crewNumber.setToolTipText("");
        crewNumber.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        crewNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crewNumberActionPerformed(evt);
            }
        });

        percentage.setText("0");
        percentage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentageActionPerformed(evt);
            }
        });

        jLabel6.setText("Hourly Salary ($/h)");

        salary.setText("0");
        salary.setToolTipText("");
        salary.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        salary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salaryActionPerformed(evt);
            }
        });

        jLabel7.setText("Increase Percent(%)");

        percentage1.setText("0");
        percentage1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentage1ActionPerformed(evt);
            }
        });

        jLabel8.setText("Amount of Hour (h/year)");

        hours.setText("0");
        hours.setToolTipText("");
        hours.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        hours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hoursActionPerformed(evt);
            }
        });

        jLabel9.setText("Increase Percent(%)");

        percentage2.setText("0");
        percentage2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentage2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(hours, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(percentage2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(salary, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(percentage1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(crewNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(percentage, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(crewNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(percentage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(percentage1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(percentage2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CostCB, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(costTablePane, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(CostCB, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(costTablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(120, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleName("costPanel");
    }// </editor-fold>//GEN-END:initComponents

    private void CostCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CostCBActionPerformed
        JComboBox cb = (JComboBox)evt.getSource();
        selection = (String)cb.getSelectedItem();
        updateCostPanel(selection);
    }//GEN-LAST:event_CostCBActionPerformed

    private void crewNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crewNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_crewNumberActionPerformed

    private void percentageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_percentageActionPerformed

    private void salaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salaryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_salaryActionPerformed

    private void percentage1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentage1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_percentage1ActionPerformed

    private void hoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hoursActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hoursActionPerformed

    private void percentage2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentage2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_percentage2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox CostCB;
    private javax.swing.JTable costTable;
    private javax.swing.JScrollPane costTablePane;
    private javax.swing.JTextField crewNumber;
    private javax.swing.JTextField hours;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField percentage;
    private javax.swing.JTextField percentage1;
    private javax.swing.JTextField percentage2;
    private javax.swing.JTextField salary;
    // End of variables declaration//GEN-END:variables

    private void updateCostPanel(String selection) {
        if(selection.equals("Percentage")) {
            costTablePane.setVisible(false);
            jPanel1.setVisible(true);
        }
        else {
            costTablePane.setVisible(true);
            jPanel1.setVisible(false);
        }
    }
    
    public Cost getCost() {
        javaapplication.Cost newCost;
        if(selection.equals("Percentage")) {
            newCost = new MaintenancePercentageCost(yearCount);
            ((MaintenancePercentageCost)newCost).setCrewNumber(Integer.parseInt(crewNumber.getText()));
            ((MaintenancePercentageCost)newCost).setPercentage(Integer.parseInt(percentage.getText()));
            ((MaintenancePercentageCost)newCost).setSalary(Double.parseDouble(salary.getText()));
            ((MaintenancePercentageCost)newCost).setPercentage1(Integer.parseInt(percentage1.getText()));
            ((MaintenancePercentageCost)newCost).setHours(Double.parseDouble(hours.getText()));
            ((MaintenancePercentageCost)newCost).setPercentage(Integer.parseInt(percentage2.getText()));
            
            return newCost;
        }
        else {
            newCost = new MaintenanceUserDefinedCost(yearCount);
            Vector<Integer> crewNumbers = new Vector<Integer>();
            Vector<Double> salaries = new Vector<Double>();
            Vector<Double> hourValues = new Vector<Double>();
            int rc = costTable.getRowCount();
            for(int i =0; i<rc; i++) {
                int value = (Integer)costTable.getValueAt(i, 1);
                crewNumbers.add(value);
                double value2 = (Double)costTable.getValueAt(i, 2);
                salaries.add(value2);
                double value3 = (Double)costTable.getValueAt(i, 3);
                hourValues.add(value3);
            }
            ((MaintenanceUserDefinedCost)newCost).setCrewNumbers(crewNumbers);
            ((MaintenanceUserDefinedCost)newCost).setSalaries(salaries);
            ((MaintenanceUserDefinedCost)newCost).setHourValues(hourValues);
            return newCost;
        }
        
    }
    
    public void initCostPanel(Cost cost, int yearCnt) {
        yearCount = yearCnt;
        if(cost instanceof MaintenancePercentageCost) {
            MaintenancePercentageCost pCost = (MaintenancePercentageCost)cost;
            crewNumber.setText(Integer.toString(pCost.getCrewNumber()));
            percentage.setText(Integer.toString(pCost.getPercentage()));
            salary.setText(Double.toString(pCost.getSalary()));
            percentage1.setText(Integer.toString(pCost.getPercentage1()));
            hours.setText(Double.toString(pCost.getHours()));
            percentage2.setText(Integer.toString(pCost.getPercentage2()));
            MaintenanceCostDefaultTableModel model = new MaintenanceCostDefaultTableModel();
            Vector<Integer> years = new Vector<Integer>();
            Vector<Integer> crewNumbers = new Vector<Integer>();
            Vector<Double> salaries = new Vector<Double>();
            Vector<Double> hours = new Vector<Double>();
            for(int i = 0; i< yearCount; i++) {
                years.add(i+1);
                crewNumbers.add(0);
                salaries.add(0.0);
                hours.add(0.0);
            }
            model.addColumn("Year", years);
            model.addColumn("Crew Number", crewNumbers);
            model.addColumn("Hourly Salary ($/h)", salaries);
            model.addColumn("Amount of Hour (h/year)", hours);
            costTable.setModel(model);
            int columns = costTable.getColumnCount();
            for(int j = 0; j< columns; j++) {
                costTable.getColumnModel().getColumn(j).setMinWidth(110);
            }
            costTable.getColumn("Year").setMinWidth(60);
            costTable.getColumn("Year").setPreferredWidth(60);
            costTable.getColumn("Year").setWidth(60);
            
            costTable.getColumn("Amount of Hour (h/year)").setMinWidth(150);
            costTable.getColumn("Amount of Hour (h/year)").setPreferredWidth(150);
            costTable.getColumn("Amount of Hour (h/year)").setWidth(150);
            CostCB.setSelectedIndex(0);
        }
        else {
            MaintenanceUserDefinedCost udCost = (MaintenanceUserDefinedCost)cost;
            crewNumber.setText(Integer.toString(0));
            percentage.setText(Integer.toString(0));
            salary.setText(Double.toString(0.0));
            percentage1.setText(Integer.toString(0));
            hours.setText(Double.toString(0.0));
            percentage2.setText(Integer.toString(0));
            MaintenanceCostDefaultTableModel model = new MaintenanceCostDefaultTableModel();
            Vector<Integer> years = new Vector<Integer>();
            Vector<Integer> crewNumbers = new Vector<Integer>();
            Vector<Double> salaries = new Vector<Double>();
            Vector<Double> hours = new Vector<Double>();
            if(udCost != null && udCost.getCrewNumbers() != null)
            {
                crewNumbers = udCost.getCrewNumbers();
                salaries = udCost.getSalaries();
                hours = udCost.getHourValues();
            }
            else {
                crewNumbers = new Vector<Integer>();
                salaries = new Vector<Double>();
                hours = new Vector<Double>();
            }
            
            for(int i = 0; i< yearCount; i++) {
                years.add(i+1);
            }
            model.addColumn("Year", years);
            model.addColumn("Crew Number", crewNumbers);
            model.addColumn("Hourly Salary ($/h)", salaries);
            model.addColumn("Amount of Hour (h/year)", hours);
            costTable.setModel(model);
            int columns = costTable.getColumnCount();
            for(int j = 0; j< columns; j++) {
                costTable.getColumnModel().getColumn(j).setMinWidth(110);
            }
            costTable.getColumn("Year").setMinWidth(60);
            costTable.getColumn("Year").setPreferredWidth(60);
            costTable.getColumn("Year").setWidth(60);
            
            costTable.getColumn("Amount of Hour (h/year)").setMinWidth(150);
            costTable.getColumn("Amount of Hour (h/year)").setPreferredWidth(150);
            costTable.getColumn("Amount of Hour (h/year)").setWidth(150);
            
            CostCB.setSelectedIndex(1);
        }
        
    }
}
