/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication.ui;

import java.util.Vector;
import javaapplication.Cost;
import javaapplication.CostDefaultTableModel;
import javaapplication.MyDefaultTableModel;
import javaapplication.PercentageCost;
import javaapplication.SumpDefaultTableModel;
import javaapplication.SumpPercentageCost;
import javaapplication.SumpUserDefinedCost;
import javaapplication.UserDefinedCost;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author soner
 */
public class SumpCostPanel extends javax.swing.JPanel {

    private String selection = "Percentage";
    private int yearCount = 0;
    /**
     * Creates new form CostPanel
     */
    public SumpCostPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        costTablePane = new javax.swing.JScrollPane();
        costTable = new javax.swing.JTable();

        setToolTipText("");
        setName("costPanel"); // NOI18N

        costTablePane.setBorder(null);

        costTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        costTable.getTableHeader().setReorderingAllowed(false);
        costTablePane.setViewportView(costTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(costTablePane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(costTablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleName("costPanel");
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable costTable;
    private javax.swing.JScrollPane costTablePane;
    // End of variables declaration//GEN-END:variables

    
    public Cost getCost() {
        javaapplication.Cost newCost;
        newCost = new SumpUserDefinedCost(yearCount);
        Vector<Integer> amounts = new Vector<Integer>();
        Vector<Double> sizes = new Vector<Double>();
        Vector<Double> values = new Vector<Double>();
        int rc = costTable.getRowCount();
        for (int i = 0; i < rc; i++) {
            int amount = (Integer) costTable.getValueAt(i, 1);
            amounts.add(amount);
            double size = (Double) costTable.getValueAt(i, 2);
            sizes.add(size);
            double value = (Double) costTable.getValueAt(i, 3);
            values.add(value);
        }
        ((SumpUserDefinedCost) newCost).setAmounts(amounts);
        ((SumpUserDefinedCost) newCost).setSizes(sizes);
        ((SumpUserDefinedCost) newCost).setCostValues(values);
        return newCost;
    }

    public void initCostPanel(Cost cost, int yearCnt) {
        yearCount = yearCnt;
        SumpDefaultTableModel model = new SumpDefaultTableModel();
        Vector<Integer> years = new Vector<Integer>();
        Vector<Double> values = new Vector<Double>();
        Vector<Integer> amounts = new Vector<Integer>();
        Vector<Double> sizes = new Vector<Double>();
        
            SumpUserDefinedCost udCost = (SumpUserDefinedCost)cost;
            
            if(udCost != null){
                if(udCost.getCostValues() != null){
                    values = udCost.getCostValues();
                }
                if(udCost.getAmounts() != null){
                    amounts = udCost.getAmounts();
                }
                if(udCost.getSizes() != null){
                    sizes = udCost.getSizes();
                }  
            }
            
            for(int i = 0; i< yearCount; i++) {
                years.add(i+1);
                if(amounts.size()<= i){
                    amounts.add(0);
                }
                if(sizes.size()<= i){
                    sizes.add(0.0);
                }
                if(values.size()<= i){
                    values.add(0.0);
                }
            }
            model.addColumn("Year", years);
            model.addColumn("Amount (ea)", amounts);
            model.addColumn("Size (m\u00B3)", sizes);
            model.addColumn("Advance Cost ($/m\u00B3)", values);
            costTable.setModel(model);
            costTable.getColumn("Year").setPreferredWidth(50);
            costTable.getColumn("Year").setMaxWidth(50);
            costTable.getColumn("Year").setMinWidth(50);
            costTable.getColumn("Year").setWidth(50);
        
    }
}
